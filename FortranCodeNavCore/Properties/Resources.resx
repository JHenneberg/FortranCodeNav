<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="fortran_codenav_128" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\fortran_codenav_128.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Function_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Function_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Interface_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Interface_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Module_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Module_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Search" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Search.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Subroutine_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Subroutine_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Type_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Type_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="variable_char" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\variable_char.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="variable_float" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\variable_float.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="variable_int" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\variable_int.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="variable_logical" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\variable_logical.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="variable_type" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\variable_type.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="fortran_codenav_64_nobg" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\fortran_codenav_64_nobg.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="intr_abs" xml:space="preserve">
    <value>abs(a) computes the absolute value of a.

Standard:
FORTRAN 77 and later

Class: 
Elemental function

Syntax: 
result = abs(a)

Arguments: 
a - the type of the argument shall be an integer, real, or complex.

Return value:
The return value is of the same type and kind as the argument except the return value is real for a complex argument.
http://fortranwiki.org/fortran/show/abs</value>
  </data>
  <data name="intr_achar" xml:space="preserve">
    <value>achar(i) returns the character located at position i in the ASCII collating sequence.

Standard:
FORTRAN 77 and later, with kind argument Fortran 2003 and later

Class: 
Elemental function

Syntax: 
result = achar(i [, kind])

Arguments: 
i - the type shall be integer.
kind - (optional) an integer initialization expression indicating the kind parameter of the result.

Return value:
The return value is of type character with a length of one. If the kind argument is present, the return value is of the specified kind and of the default kind otherwise.
http://fortranwiki.org/fortran/show/achar</value>
  </data>
  <data name="intr_acos" xml:space="preserve">
    <value>acos(x) computes the arccosine of x (inverse of cos(x)).

Standard:
FORTRAN 77 and later, for a complex argument Fortran 2008 and later

Class: 
Elemental function

Syntax:
result = acos(x)

Arguments: 
x - The type shall be real with a magnitude that is less than one.

Return value:
The return value is of the same type and kind as x. The real part of the result is in radians and lies in the range 0≤acos(x)≤π.
http://fortranwiki.org/fortran/show/acos</value>
  </data>
  <data name="intr_acosh" xml:space="preserve">
    <value>acosh(x) computes the inverse hyperbolic cosine of x.

Standard:
Fortran 2008 and later

Class: 
Elemental function

Syntax: 
result = acosh(x)

Arguments: 
x - the type shall be real or complex.

Return value:
The return value has the same type and kind as x. If x is complex, the imaginary part of the result is in radians and lies between 0≤Imacosh(x)≤π.
http://fortranwiki.org/fortran/show/acosh</value>
  </data>
  <data name="intr_adjustl" xml:space="preserve">
    <value>adjustl(string) will left adjust a string by removing leading spaces. Spaces are inserted at the end of the string as needed.

Standard:
Fortran 95 and later

Class: 
Elemental function

Syntax: 
result = adjustl(string)

Arguments: 
string - the type shall be character.

Return value:
The return value is of type character and of the same kind as string where leading spaces are removed and the same number of spaces are inserted on the end of string.
http://fortranwiki.org/fortran/show/adjustl</value>
  </data>
  <data name="intr_adjustsr" xml:space="preserve">
    <value>adjustr(string) will right adjust a string by removing trailing spaces. Spaces are inserted at the start of the string as needed.

Standard:
Fortran 95 and later

Class: 
Elemental function

Syntax: 
result = adjustr(string)

Arguments: 
string - the type shall be character.

Return value:
The return value is of type character and of the same kind as string where trailing spaces are removed and the same number of spaces are inserted at the start of string.
http://fortranwiki.org/fortran/show/adjustr</value>
  </data>
  <data name="intr_aimag" xml:space="preserve">
    <value>aimag(z) yields the imaginary part of complex argument z. The imag(z) and imagpart(z) intrinsic functions are provided for compatibility with g77, and their use in new code is strongly discouraged.

Standard:
FORTRAN 77 and later

Class: 
Elemental function

Syntax: 
result = aimag(z)

Arguments: 
z - The type of the argument shall be complex.

Return value:
The return value is of type real with the kind type parameter of the argument.
http://fortranwiki.org/fortran/show/aimag</value>
  </data>
  <data name="intr_aint" xml:space="preserve">
    <value>aint(a [, kind]) truncates its argument to a whole number.

Standard:
FORTRAN 77 and later

Class: 
Elemental function

Syntax: 
result = aint(a [, kind])

Arguments: 
a - the type of the argument shall be real.
kind - (optional) an integer initialization expression indicating the kind parameter of the result.

Return value:
The return value is of type real with the kind type parameter of the argument if the optional kind is absent; otherwise, the kind type parameter will be given by kind. If the magnitude of x is less than one, aint(x) returns zero. If the magnitude is equal to or greater than one then it returns the largest whole number that does not exceed its magnitude. The sign is the same as the sign of x.
http://fortranwiki.org/fortran/show/aint</value>
  </data>
  <data name="intr_all" xml:space="preserve">
    <value>all(mask [, dim]) determines if all the values are true in mask in the array along dimension dim.

Standard:
Fortran 95 and later

Class: 
Transformational function

Syntax: 
result = all(mask [, dim])

Arguments: 
mask - the type of the argument shall be logical and it shall not be scalar.
dim - (optional) dim shall be a scalar integer with a value that lies between one and the rank of mask.

Return value:
all(mask) returns a scalar value of type logical where the kind type parameter is the same as the kind type parameter of mask. If dim is present, then all(mask, dim) returns an array with the rank of mask minus 1. The shape is determined from the shape of mask where the dim dimension is elided.

all(mask) is true if all elements of mask are true. It also is true if mask has zero size; otherwise, it is false.

If the rank of mask is one, then all(mask, dim) is equivalent to all(mask). If the rank is greater than one, then all(mask, dim) is determined by applying all to the array sections.
http://fortranwiki.org/fortran/show/all</value>
  </data>
  <data name="intr_allocated" xml:space="preserve">
    <value>allocated(array) and allocated(scalar) check the allocation status of array and scalar, respectively.

Standard:
Fortran 95 and later. Note, the scalar= keyword and allocatable scalar entities are available in Fortran 2003 and later.

Class: 
Inquiry function

Syntax: 
result = allocated(array)
result = allocated(scalar)
Arguments: 
array - the argument shall be an allocatable array.
scalar - the argument shall be an allocatable scalar.

Return value:
The return value is a scalar logical with the default logical kind type parameter. If the argument is allocated then the result is .true.; otherwise, it returns .false..
http://fortranwiki.org/fortran/show/allocated</value>
  </data>
  <data name="intr_anint" xml:space="preserve">
    <value>anint(a [, kind]) rounds its argument to the nearest whole number.

Standard:
FORTRAN 77 and later

Class: 
Elemental function

Syntax: 
result = anint(a [, kind])

Arguments: 
a - the type of the argument shall be real.
kind - (optional) an integer initialization expression indicating the kind parameter of the result.

Return value:
The return value is of type real with the kind type parameter of the argument if the optional kind is absent; otherwise, the kind type parameter will be given by kind. If a is greater than zero, anint(a) returns aint(x + 0.5). If a is less than or equal to zero then it returns aint(x - 0.5).
http://fortranwiki.org/fortran/show/anint</value>
  </data>
  <data name="intr_any" xml:space="preserve">
    <value>any(mask [, dim]) determines if any of the values in the logical array mask along dimension dim are .true..

Standard:
Fortran 95 and later

Class: 
Transformational function

Syntax: 
result = any(mask [, dim])

Arguments: 
mask - the type of the argument shall be logical and it shall not be scalar.
dim - (optional) dim shall be a scalar integer with a value that lies between one and the rank of mask.

Return value:
any(mask) returns a scalar value of type logical where the kind type parameter is the same as the kind type parameter of mask. If dim is present, then any(mask, dim) returns an array with the rank of mask minus 1. The shape is determined from the shape of mask where the dim dimension is elided.

any(mask) is true if any element of mask is true; otherwise, it is false. It also is false if mask has zero size.

If the rank of mask is one, then any(mask, dim) is equivalent to any(mask). If the rank is greater than one, then any(mask, dim) is determined by applying any to the array sections.
http://fortranwiki.org/fortran/show/any</value>
  </data>
  <data name="intr_asin" xml:space="preserve">
    <value>asin(x) computes the arcsine of its x (inverse of sin(x)).

Standard:
FORTRAN 77 and later, for a complex argument Fortran 2008 or later

Class: 
Elemental function

Syntax: 
result = asin(x)

Arguments: 
x - The type shall be either real and a magnitude that is less than or equal to one or be complex.

Return value:
The return value is of the same type and kind as x. The real part of the result is in radians and lies in the range −π/2≤asin(x)≤π/2.
http://fortranwiki.org/fortran/show/asin</value>
  </data>
  <data name="intr_asinh" xml:space="preserve">
    <value>asinh(x) computes the inverse hyperbolic sine of x.

Standard:
Fortran 2008 and later

Class: 
Elemental function

Syntax: 
result = asinh(x)
Arguments: 
x - The type shall be real or complex.

Return value:
The return value is of the same type and kind as x. If x is complex, the imaginary part of the result is in radians and lies between −π/2≤Imasinh(x)≤π/2 -\pi/2.
http://fortranwiki.org/fortran/show/asinh</value>
  </data>
  <data name="intr_associated" xml:space="preserve">
    <value>associated(pointer [, target]) determines the status of the pointer pointer or if pointer is associated with the target target.

Standard:
Fortran 95 and later

Class: 
Inquiry function

Syntax: 
result = associated(pointer [, target])

Arguments: 
pointer - pointer shall have the pointer attribute and it can be of any type.
target - (Optional) target shall be a pointer or a target. It must have the same type, kind type parameter, and array rank as pointer.
The association status of neither pointer nor target shall be undefined.


Return value:
associated(pointer) returns a scalar value of type logical(4). There are several cases:

When the optional target is not present then associated(pointer) is true if pointer is associated with a target; otherwise, it returns false.

If target is present and a scalar target, the result is true if target is not a zero-sized storage sequence and the target associated with pointer occupies the same storage units. If pointer is disassociated, the result is false.

If target is present and an array target, the result is true if target and pointer have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and target and pointer occupy the same storage units in array element order.

As in case 2, the result is false, if pointer is disassociated.

If target is present and an scalar pointer, the result is true if target is associated with pointer, the target associated with target are not zero-sized storage sequences and occupy the same storage units.

The result is false, if either target or pointer is disassociated.

If target is present and an array pointer, the result is true if target associated with pointer and the target associated with target have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and target and pointer occupy the same storage units in array element order. The result is false, if either target or pointer is disassociated.
http://fortranwiki.org/fortran/show/associated</value>
  </data>
  <data name="intr_atan" xml:space="preserve">
    <value>atan(x) computes the arctangent of x.

Standard:
FORTRAN 77 and later; for a complex argument and for two arguments Fortran 2008 or later

Class: 
Elemental function

Syntax: 
result = atan(x)
result = atan(y, x)
Arguments: 
x - The type shall be real or complex; if y is present, x shall be real.
y - Shall be of the same type and kind as x.

Return value:
The return value is of the same type and kind as x. If y is present, the result is identical to atan2(y,x). Otherwise, it the arcus tangent of x, where the real part of the result is in radians and lies in the range −π/2≤Reatan(x)≤π/2.
http://fortranwiki.org/fortran/show/atan</value>
  </data>
  <data name="intr_atomic_add" xml:space="preserve">
    <value>atomic_add(atom, value) atomically adds the value of var to the variable atom. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_add (atom, value [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_add</value>
  </data>
  <data name="intr_atomic_cas" xml:space="preserve">
    <value>atomic_cas compares the variable atom with the value of compare; if the value is the same, atom is set to the value of new. Additionally, old is set to the value of atom that was used for the comparison. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_cas (atom, old, compare, new [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of either integer type with atomic_int_kind kind or logical type with atomic_logical_kind kind.
old - Scalar of the same type and kind as atom.
compare - Scalar variable of the same type and kind as atom.
new - Scalar variable of the same type as atom. If kind is different, the value is converted to the kind of atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_cas</value>
  </data>
  <data name="intr_atomic_define" xml:space="preserve">
    <value>atomic_define(atom, value) defines the variable atom with the value value atomically. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
Fortran 2008 and later; with stat, TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_define (atom, value [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of either integer type with atomic_int_kind kind or logical type with atomic_logical_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_define</value>
  </data>
  <data name="intr_atomic_fetch_add" xml:space="preserve">
    <value>atomic_fetch_add(atom, value, old) atomically stores the value of atom in old and adds the value of var to the variable atom. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_fetch_add(atom, value, old [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind. atomic_logical_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
old - Scalar of the same type and kind as atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_fetch_add</value>
  </data>
  <data name="intr_atomic_fetch_and" xml:space="preserve">
    <value>atomic_fetch_and(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise and between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_fetch_and(atom, value, old [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
old - Scalar of the same type and kind as atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_fetch_and</value>
  </data>
  <data name="intr_atomic_fetch_or" xml:space="preserve">
    <value>atomic_fetch_or(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise or between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_fetch_or(atom, value, old [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
old - Scalar of the same type and kind as atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_fetch_or</value>
  </data>
  <data name="intr_atomic_fetch_xor" xml:space="preserve">
    <value>atomic_fetch_xor(atom, value, old) atomically stores the value of atom in old and defines atom with the bitwise xor between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_fetch_xor (atom, value, old [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
old - Scalar of the same type and kind as atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_fetch_xor</value>
  </data>
  <data name="intr_atomic_or" xml:space="preserve">
    <value>atomic_or(atom, value) atomically defines atom with the bitwise or between the values of atom and value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_or(atom, value [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_or</value>
  </data>
  <data name="intr_atomic_ref" xml:space="preserve">
    <value>atomic_ref(atom, value) atomically assigns the value of the variable atom to value. When stat is present and the invocation was successful, it is assigned the value 0. If it is present and the invocation has failed, it is assigned a positive value; in particular, for a coindexed atom, if the remote image has stopped, it is assigned the value of iso_fortran_env‘s stat_stopped_image and if the remote image has failed, the value stat_failed_image.

Standard:
Fortran 2008 and later; with stat, TS 18508 or later

Class: 
Atomic subroutine

Syntax: 
call atomic_ref(value, atom [, stat])

Arguments: 
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
atom - Scalar coarray or coindexed variable of either integer type with atomic_int_kind kind or logical type with atomic_logical_kind kind.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_ref</value>
  </data>
  <data name="intr_atomic_xor" xml:space="preserve">
    <value>call atomic_xor(atom, value [, stat])
Arguments: 
atom - Scalar coarray or coindexed variable of integer type with atomic_int_kind kind.
value - Scalar of the same type as atom. If the kind is different, the value is converted to the kind of atom.
stat - (optional) Scalar default-kind integer variable.
http://fortranwiki.org/fortran/show/atomic_xor</value>
  </data>
  <data name="Intrinsic_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Intrinsic_Icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="intr_bessel_j0" xml:space="preserve">
    <value>bessel_j0(x) computes the Bessel function of the first kind of order 0 of x.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bessel_j0(x)

Arguments:
x - The type shall be real.

Return value:
The return value is of type real and lies in the range −0.4027...≤Bessel(0,x)≤1. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_j0</value>
  </data>
  <data name="intr_bessel_j1" xml:space="preserve">
    <value>bessel_j1(x) computes the Bessel function of the first kind of order 1 of x.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bessel_j1(x)

Arguments:
x - The type shall be real.

Return value:
The return value is of type real and lies in the range −0.5818...≤Bessel(0,x)≤0.5818. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_j1</value>
  </data>
  <data name="intr_bessel_jn" xml:space="preserve">
    <value>bessel_jn(n, x) computes the Bessel function of the first kind of order n of x. If n and x are arrays, their ranks and shapes shall conform.

bessel_jn(n1, n2, x) returns an array with the Bessel functions of the first kind of the orders n1 to n2.

Standard:
Fortran 2008 and later

Class:
Elemental function, except for the transformational variant bessel_jn(n1, n2, x).

Syntax
result = bessel_jn(n, x)
result = bessel_jn(n1, n2, x)

Arguments:
n - Shall be a scalar or an array of type integer.
n1 - Shall be a non-negative scalar of type integer.
n2 - Shall be a non-negative scalar of type integer.
x - Shall be a scalar or an array of type real. For bessel_jn(n1, n2, x) it shall be scalar.

Return value:
The return value is a scalar of type real. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_jn</value>
  </data>
  <data name="intr_bessel_y0" xml:space="preserve">
    <value>bessel_y0(x) computes the Bessel function of the second kind of order 0 of x.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bessel_y0(x)

Arguments:
x - The type shall be real.

Return value:
The return value is of type real. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_y0</value>
  </data>
  <data name="intr_bessel_y1" xml:space="preserve">
    <value>bessel_y1(x) computes the Bessel function of the second kind of order 1 of x.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bessel_y1(x)

Arguments:
x - The type shall be real.

Return value:
The return value is real. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_y1</value>
  </data>
  <data name="intr_bessel_yn" xml:space="preserve">
    <value>bessel_yn(n, x) computes the Bessel function of the second kind of order n of x. If n and x are arrays, their ranks and shapes shall conform.

bessel_yn(n1, n2, x) returns an array with the Bessel functions of the first kind of the orders n1 to n2.

Standard:
Fortran 2008 and later

Class:
Elemental function, except for the transformational function bessel_yn(n1, n2, x)

Syntax
result = bessel_yn(n, x)
result = bessel_yn(n1, n2, x)

Arguments:
n - Shall be a scalar or an array of type integer.
n1 - Shall be a non-negative scalar of type integer.
n2 - Shall be a non-negative scalar of type integer.
x - Shall be a scalar or an array of type real; for bessel_yn(n1, n2, x) it shall be scalar.

Return value:
The return value is real. It has the same kind as x.
http://fortranwiki.org/fortran/show/bessel_yn</value>
  </data>
  <data name="intr_bge" xml:space="preserve">
    <value>bge(i, j) determines whether an integer is a bitwise greater than or equal to another.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bge(i, j)

Arguments:
i - Shall be of integer type.
j - Shall be of integer type, and of the same kind as i.

Return value:
The return value is of type logical and of the default kind.
http://fortranwiki.org/fortran/show/bge</value>
  </data>
  <data name="intr_bgt" xml:space="preserve">
    <value>bgt(i, j) determines whether an integer is bitwise greater than another.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = bgt(i, j)

Arguments:
i - Shall be of integer type.
j - Shall be of integer type, and of the same kind as i.

Return value:
The return value is of type logical and of the default kind.
http://fortranwiki.org/fortran/show/bgt</value>
  </data>
  <data name="intr_bit_size" xml:space="preserve">
    <value>bit_size(i) returns the number of bits (integer precision plus sign bit) represented by the type of i.

Standard:
Fortran 95 and later

Class:
Inquiry function

Syntax
result = bit_size(i)

Arguments:
i - The type shall be integer.

Return value:
The return value is of type integer
http://fortranwiki.org/fortran/show/bit_size</value>
  </data>
  <data name="intr_ble" xml:space="preserve">
    <value>ble(i, j) determines whether an integer is bitwise less than or equal to another.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = ble(i, j)

Arguments:
i - Shall be of integer type.
j - Shall be of integer type, and of the same kind as i.

Return value:
The return value is of type logical and of the default kind.
http://fortranwiki.org/fortran/show/ble</value>
  </data>
  <data name="intr_blt" xml:space="preserve">
    <value>blt(i, j) determines whether an integer is bitwise less than another.

Standard:
Fortran 2008 and later

Class:
Elemental function

Syntax
result = blt(i, j)

Arguments:
i - Shall be of integer type.
j - Shall be of integer type, and of the same kind as i.

Return value:
The return value is of type logical and of the default kind.
http://fortranwiki.org/fortran/show/blt</value>
  </data>
  <data name="intr_btest" xml:space="preserve">
    <value>btest(i,pos) returns logical .true. if the bit at pos in i is set.

Standard:
Fortran 95 and later

Class:
Elemental function

Syntax
result = btest(i, pos)

Arguments:
i - The type shall be integer.
pos - The type shall be integer. A value of zero refers to the least significant bit.

Return value:
The return value is of type logical.
http://fortranwiki.org/fortran/show/btest</value>
  </data>
</root>